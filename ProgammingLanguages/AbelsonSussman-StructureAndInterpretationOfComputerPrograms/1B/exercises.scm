;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Exercise 1.9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Each of the following two procedures defines a method 
;; for adding two positive integers in terms of the 
;; procedures inc, which increments its argument by 1, 
;; and dec, which decrements its argument by 1

;; (define (+ a b) (if (= a 0) b (inc (+ (dec a) b))))

;; (define (+ a b) (if (= a 0) b (+ (dec a) (inc b))))

;; Using the substitution model, illustrate the process 
;; generated by each procedure in evaluating (+ 4 5). 
;; Are these processes iterative or recursive?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; BOOK (36)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Exercise 1.10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The following procedure computes a mathematical 
;; function called Ackermann's function.

(define (A x y)
  	(cond ((= y 0) 0)
    	((= x 0) (* 2 y))
        ((= y 1) 2)
        (else 
        	(A (- x 1)
        	(A x (- y 1))))))

;; What are the values of the following expressions?

;; (A 1 10) ; (A 2 4) ; (A 3 3)

;; Consider the following procedures, where A is the 
;; procedure defined above:

(define (f n) (A 0 n))

(define (g n) (A 1 n))

(define (h n) (A 2 n))

(define (k n) (* 5 n n))

;; Give concise mathematical definitions for the 
;; functions computed by the procedures f, g, and h for 
;; positive integer values of n. 
;; For example, (k n) computes 5n^2.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (A 1 10) 
;; (A 0 (A 1 9)) 
;; (A 0 (A 0 (A 1 8))) 
;; (A 0 (A 0 (A 0 (A 1 7)))) 
;; (A 0 (A 0 (A 0 (A 0 (A 1 6))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5)))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4))))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3)))))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2))))))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1)))))))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2))))))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4)))))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8))))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16)))))) 
;; (A 0 (A 0 (A 0 (A 0 (A 0 32))))) 
;; (A 0 (A 0 (A 0 (A 0 64)))) 
;; (A 0 (A 0 (A 0 128))) 
;; (A 0 (A 0 256)) 
;; (A 0 512) 
;; 1024

;; BOOK (37)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Exercise 1.11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A function f is defined by the rule that 
;; f(n) = n if n < 3 
;; f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3) otherwise. 
;; Write a procedure that computes f by means of a 
;; recursive process. Write a procedure that computes f 
;; by means of an iterative process.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (recursive-f n)
    (if (< n 3) n 
        (+
            (recursive-f (- n 1))
            (* 2 (recursive-f (- n 2)))
            (* 3 (recursive-f (- n 3))))))

(define (iterative-f n)
    (define (iterative-f-aux count a b c)
        (if 
            (= count 0) c
            (iterative-f-aux (- count 1) (+ a (* 2 b) (* 3 c)) a b)))
    (iterative-f-aux n 2 1 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Exercise 1.12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The following pattern of numbers is called Pascal's 
;; triangle.

;;  1
;;  1 1
;;  1 2 1
;;  1 3 3 1
;;  1 4 6 4 1

;; The numbers at the edge of the triangle are all 1, and 
;; each number inside the triangle is the sum of the two 
;; numbers above it.35 Write a procedure that computes 
;; elements of Pascal's triangle by means of a recursive 
;; process.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (pascal a b)
    (if 
        (or (= a b) (= b 1)) 1
        (+
            (pascal (- a 1) (- b 1))
            (pascal (- a 1) b))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Exercise 1.13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ????

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Exercise 1.14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Draw the tree illustrating the process generated by 
;; the count-change procedure in making change for 11 
;; cents. What are the orders of growth of the space and 
;; number of steps used by this process as the amount to 
;; be changed increases?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (count-change amount)
    (define (cc amount kinds-of-coins)
        (cond 
            ((= amount 0) 1)
            ((or (< amount 0) (= kinds-of-coins 0)) 0)
            (else 
                (+
                    (cc amount (- kinds-of-coins 1))
                    (cc 
                        (- amount (first-denomination kinds-of-coins)) 
                        kinds-of-coins)))))

    (define (first-denomination kinds-of-coins)
        (cond 
            ((= kinds-of-coins 1) 1)
            ((= kinds-of-coins 2) 5)
            ((= kinds-of-coins 3) 10)
            ((= kinds-of-coins 4) 25)
            ((= kinds-of-coins 5) 50)))

    (cc amount 5))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Exercise 1.15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The sine of an angle (specified in radians) can be 
;; computed by making use of the approximation sin x ~ x 
;; if x is sufficiently small, and the trigonometric 
;; identity: sin x = 3 * sin(x/3) - 4 sin^3 (x/3)
;; to reduce the size of the argument of sin. 
;; (For purposes of this exercise an angle is considered 
;; sufficiently small'' if its magnitude is not greater 
;; than 0.1 radians.) These ideas are incorporated in 
;; the following procedures:

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
    (if 
        (not (> (abs angle) 0.1)) angle
        (p (sine (/ angle 3.0)))))

;; * How many times is the procedure p applied when 
;; (sine 12.15) is evaluated?

;; * What is the order of growth in space and number 
;; of steps (as a function of a) used by the process 
;; generated by the sine procedure when (sine a) 
;; is evaluated?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (sine 12.15)
;; (p (sine (/ 12.15 3.0)))
;; (p (sine 4.05))
;; (p (p (sine (/ 4.05 3.0))))
;; (p (p (sine 1.35)))
;; (p (p (p (sine (/ 1.35 3.0)))))
;; (p (p (p (sine 0.45))))
;; (p (p (p (p (sine 0.45)))))
;; (p (p (p (p (p (sine (/ 0.45 3.0)))))))
;; (p (p (p (p (p (sine 0.05))))))
;; (p (p (p (p (p 0.05)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Exercise 1.16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Design a procedure that evolves an iterative 
;; exponentiation process that uses successive squaring 
;; and uses a logarithmic number of steps, as does 
;; fast-expt. (Hint: Using the observation that 
;; (b^n/2)^2 = (b^2)^(n/2), keep, along with the 
;; exponent n and the base b, an additional state 
;; variable a, and define the state transformation in 
;; such a way that the product ab^n is unchanged from 
;; state to state. At the beginning of the process a is 
;; taken to be 1, and the answer is given by the value 
;; of a at the end of the process. In general, the 
;; technique of defining an invariant quantity that 
;; remains unchanged from state to state is a powerful 
;; way to think about the design of iterative 
;; algorithms.)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (even? n)
    (= (remainder n 2) 0))

(define (fast-pow b n)
    (cond 
        ((= n 0) 1)
        ((even? n) (square (fast-pow b (/ n 2))))
        (else (* b (fast-pow b (- n 1))))))

(define (iterative-fast-pow-process b n)
    (define (iterative-fast-pow-process-aux a b n)
        (cond 
            ((= n 0) a)
            ((even? n) (iterative-fast-pow-process-aux a (* b b) (/ n 2)))
            (else (iterative-fast-pow-process-aux (* a b) b (- n 1)))))
    (iterative-fast-pow-process-aux 1 b n))

;; 16 * 5 = 2 * (8 * 5) =  







